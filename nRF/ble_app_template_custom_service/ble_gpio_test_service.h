/* This file was generated by plugin 'Nordic Semiconductor nRF5x v.1.2.2' (BDS version 1.0.2095.0) */

#ifndef BLE_GPIO_TEST_SERVICE_H__
#define BLE_GPIO_TEST_SERVICE_H__

#include <stdint.h>
#include <stdbool.h>
#include "ble.h"
#include "ble_srv_common.h"
#include "app_util_bds.h"



/**@brief GPIO Test Service event type. */
typedef enum
{ 
    BLE_GPIO_TEST_SERVICE_LED_EVT_NOTIFICATION_ENABLED,  /**< Led value notification enabled event. */
    BLE_GPIO_TEST_SERVICE_LED_EVT_NOTIFICATION_DISABLED, /**< Led value notification disabled event. */
    BLE_GPIO_TEST_SERVICE_LED_EVT_WRITE, /**< Led write event. */
    BLE_GPIO_TEST_SERVICE_BUTTON_EVT_NOTIFICATION_ENABLED,  /**< Button value notification enabled event. */
    BLE_GPIO_TEST_SERVICE_BUTTON_EVT_NOTIFICATION_DISABLED, /**< Button value notification disabled event. */
    BLE_GPIO_TEST_SERVICE_BUTTON_EVT_CCCD_WRITE, /**< Button CCCD write event. */
} ble_gpio_test_service_evt_type_t;

// Forward declaration of the ble_gpio_test_service_t type.
typedef struct ble_gpio_test_service_s ble_gpio_test_service_t;








/**@brief Led structure. */
typedef struct
{
    uint8_t toggle_led;
} ble_gpio_test_service_led_t;
/**@brief Button structure. */
typedef struct
{
    uint8_t button_state;
} ble_gpio_test_service_button_t;

/**@brief GPIO Test Service Service event. */
typedef struct
{
    ble_gpio_test_service_evt_type_t evt_type;    /**< Type of event. */
    union {
        uint16_t cccd_value; /**< Holds decoded data in Notify and Indicate event handler. */
        ble_gpio_test_service_led_t led; /**< Holds decoded data in Write event handler. */
    } params;
} ble_gpio_test_service_evt_t;

/**@brief GPIO Test Service Service event handler type. */
typedef void (*ble_gpio_test_service_evt_handler_t) (ble_gpio_test_service_t * p_gpio_test_service, ble_gpio_test_service_evt_t * p_evt);

/**@brief GPIO Test Service Service init structure. This contains all options and data needed for initialization of the service */
typedef struct
{
    ble_gpio_test_service_evt_handler_t     evt_handler; /**< Event handler to be called for handling events in the GPIO Test Service Service. */
    ble_gpio_test_service_led_t ble_gpio_test_service_led_initial_value; /**< If not NULL, initial value of the Led characteristic. */ 
    ble_gpio_test_service_button_t ble_gpio_test_service_button_initial_value; /**< If not NULL, initial value of the Button characteristic. */ 
} ble_gpio_test_service_init_t;

/**@brief GPIO Test Service Service structure. This contains various status information for the service.*/
struct ble_gpio_test_service_s
{
    ble_gpio_test_service_evt_handler_t evt_handler; /**< Event handler to be called for handling events in the GPIO Test Service Service. */
    uint16_t service_handle; /**< Handle of GPIO Test Service Service (as provided by the BLE stack). */
    ble_gatts_char_handles_t led_handles; /**< Handles related to the Led characteristic. */
    ble_gatts_char_handles_t button_handles; /**< Handles related to the Button characteristic. */
    uint16_t conn_handle; /**< Handle of the current connection (as provided by the BLE stack, is BLE_CONN_HANDLE_INVALID if not in a connection). */
};

/**@brief Function for initializing the GPIO Test Service.
 *
 * @param[out]  p_gpio_test_service       GPIO Test Service Service structure. This structure will have to be supplied by
 *                          the application. It will be initialized by this function, and will later
 *                          be used to identify this particular service instance.
 * @param[in]   p_gpio_test_service_init  Information needed to initialize the service.
 *
 * @return      NRF_SUCCESS on successful initialization of service, otherwise an error code.
 */
uint32_t ble_gpio_test_service_init(ble_gpio_test_service_t * p_gpio_test_service, const ble_gpio_test_service_init_t * p_gpio_test_service_init);

/**@brief Function for handling the Application's BLE Stack events.*/
void ble_gpio_test_service_on_ble_evt(ble_gpio_test_service_t * p_gpio_test_service, ble_evt_t * p_ble_evt);

/**@brief Function for setting the Button.
 *
 * @details Sets a new value of the Button characteristic. The new value will be sent
 *          to the client the next time the client reads the Button characteristic.
 *          This function is only generated if the characteristic's Read property is not 'Excluded'.
 *
 * @param[in]   p_gpio_test_service                 GPIO Test Service Service structure.
 * @param[in]   p_button  New Button.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_gpio_test_service_button_set(ble_gpio_test_service_t * p_gpio_test_service, ble_gpio_test_service_button_t * p_button);

/**@brief Function for sending the Button.
 *
 * @details The application calls this function after having performed a button.
 *          The button data is encoded and sent to the client.
 *          This function is only generated if the characteristic's Notify or Indicate property is not 'Excluded'.
 *
 * @param[in]   p_gpio_test_service                    GPIO Test Service Service structure.
 * @param[in]   p_button               New button.
 *
 * @return      NRF_SUCCESS on success, otherwise an error code.
 */
uint32_t ble_gpio_test_service_button_send(ble_gpio_test_service_t * p_gpio_test_service, ble_gpio_test_service_button_t * p_button);

#endif //_BLE_GPIO_TEST_SERVICE_H__
